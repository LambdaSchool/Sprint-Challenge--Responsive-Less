// Mixins Here

.nav-tags(@mybackground) {
    background: @mybackground;
    /* border: @seashell; */
    height: 80%;
}

.center(@mydisplay) {
    display: @mydisplay;
    flex-direction: column;
    justify-content: space-evenly;
    align-items: center;
}

/* my-hover-mixin()  {
    &:hover {
        background: @buttonparacolor;
        color: @btn-bg-color; 
    }
    button () {
        
    }
} */

//parametric mixins here
/* 
.navigation(.nav-tags (), .center()) 

.btn (.btn p(),) .center()) */

/* fonts are good for parametric mixins and mixins */


.btnWalk(@dark, @light) {
    // padding: 9px;
    height: 60px;
    width: 100px;
    overflow: hidden;
    border-radius: 4px;
    text-align: center;
    vertical-align: middle;
    box-shadow: 4px 4px 4px #999;
    background: @dark;
    color: @light;
}

.center() {
    display: flex;
    justify-content: center;
    align-items: center;
}


/*variables are just plug-ins for properties */
/* perimeters are symbols/plug-ins for properties */
/*mixins- combining the CSS properties (padding,height) and selectors (p, img) */

/* parametric mixin--- */

/*
.nav-tags (mixin)

(@mybackground (this is the parameter (so this is the part that makes it a parametric mixin)))

{ }  <--- all the stuff in here are properties 

background: @mybackground--- the @mybackground part is connected to the parameter for the parametric mixin part thats in the parathesis which is connected to the .nav-tag (mixin). then when you go to where the less file is (in this case for the navigation part so navigation.less), you write the mixin as .nav-tags for example and then in paranthesis (make sure there's no space between mixin and parantheses), you write the actual property (in this case: red) and then the semi-colon. 
*/